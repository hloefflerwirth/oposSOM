// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// calculateDelta
void calculateDelta(const Rcpp::NumericMatrix& inputMatrix, const Rcpp::NumericVector& inputVector, const bool naExist, Rcpp::NumericMatrix& resultDelta);
RcppExport SEXP _oposSOM_calculateDelta(SEXP inputMatrixSEXP, SEXP inputVectorSEXP, SEXP naExistSEXP, SEXP resultDeltaSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type inputMatrix(inputMatrixSEXP);
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type inputVector(inputVectorSEXP);
    Rcpp::traits::input_parameter< const bool >::type naExist(naExistSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type resultDelta(resultDeltaSEXP);
    calculateDelta(inputMatrix, inputVector, naExist, resultDelta);
    return R_NilValue;
END_RCPP
}
// calculateEuclideanDistances
void calculateEuclideanDistances(const Rcpp::NumericMatrix& deltaMatrix, Rcpp::NumericVector& resultEuclideanDistances2);
RcppExport SEXP _oposSOM_calculateEuclideanDistances(SEXP deltaMatrixSEXP, SEXP resultEuclideanDistances2SEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type deltaMatrix(deltaMatrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type resultEuclideanDistances2(resultEuclideanDistances2SEXP);
    calculateEuclideanDistances(deltaMatrix, resultEuclideanDistances2);
    return R_NilValue;
END_RCPP
}
// calculateNeighborhoodMatrix
void calculateNeighborhoodMatrix(const int& winnerNeuronR, const int& somSize, const double& radius, Rcpp::NumericVector& resultVector);
RcppExport SEXP _oposSOM_calculateNeighborhoodMatrix(SEXP winnerNeuronRSEXP, SEXP somSizeSEXP, SEXP radiusSEXP, SEXP resultVectorSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type winnerNeuronR(winnerNeuronRSEXP);
    Rcpp::traits::input_parameter< const int& >::type somSize(somSizeSEXP);
    Rcpp::traits::input_parameter< const double& >::type radius(radiusSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type resultVector(resultVectorSEXP);
    calculateNeighborhoodMatrix(winnerNeuronR, somSize, radius, resultVector);
    return R_NilValue;
END_RCPP
}
// matrixToCodebookMatrix
void matrixToCodebookMatrix(const Rcpp::NumericVector& matrixAsVector, Rcpp::NumericMatrix& result);
RcppExport SEXP _oposSOM_matrixToCodebookMatrix(SEXP matrixAsVectorSEXP, SEXP resultSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericVector& >::type matrixAsVector(matrixAsVectorSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type result(resultSEXP);
    matrixToCodebookMatrix(matrixAsVector, result);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_oposSOM_calculateDelta", (DL_FUNC) &_oposSOM_calculateDelta, 4},
    {"_oposSOM_calculateEuclideanDistances", (DL_FUNC) &_oposSOM_calculateEuclideanDistances, 2},
    {"_oposSOM_calculateNeighborhoodMatrix", (DL_FUNC) &_oposSOM_calculateNeighborhoodMatrix, 4},
    {"_oposSOM_matrixToCodebookMatrix", (DL_FUNC) &_oposSOM_matrixToCodebookMatrix, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_oposSOM(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
